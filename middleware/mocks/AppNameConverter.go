// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// AppNameConverter is an autogenerated mock type for the AppNameConverter type
type AppNameConverter struct {
	mock.Mock
}

// ConvertKeyToAppName provides a mock function with given fields: ctx, clients, config
func (_m *AppNameConverter) ConvertKeyToAppName(ctx *gin.Context, clients string, config string) (string, error) {
	ret := _m.Called(ctx, clients, config)

	if len(ret) == 0 {
		panic("no return value specified for ConvertKeyToAppName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string, string) (string, error)); ok {
		return rf(ctx, clients, config)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string, string) string); ok {
		r0 = rf(ctx, clients, config)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string, string) error); ok {
		r1 = rf(ctx, clients, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAppNameConverter creates a new instance of AppNameConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppNameConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppNameConverter {
	mock := &AppNameConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
